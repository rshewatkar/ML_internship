# -*- coding: utf-8 -*-
"""House_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c3zwqOQBBBlCJ9gI4qPg3gN1U13oaUYZ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

# Lets load the boston house price dataset

from sklearn.datasets import fetch_california_housing

data = fetch_california_housing()

data.keys()

print(data.DESCR)

print(data.data)

print(data.target)

print(data.feature_names)

housing_data = pd.DataFrame(data.data, columns=data.feature_names)

housing_data.head()

housing_data["price"] = data.target

df = housing_data
df.head()

df.info()

# Summarizing the stats of the data
df.describe()

# checking the missing values
df.isnull().sum()

## Exploratory Data Analysis
# 1 Correlation
df.corr()

sns.pairplot(df[['MedInc','HouseAge','AveRooms','AveBedrms','price']])

plt.scatter(df['MedInc'],df['price'])
plt.xlabel("MedInc")
plt.ylabel("price")

sns.regplot(x='AveBedrms',y='price', data=df)

sns.regplot(x='HouseAge',y='price', data=df)

# Independant and Dependant features

X = df.iloc[:,:-1]
y = df.iloc[:,-1:]
print(X.head(2))
print(y.head(2))

# Train test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.3, random_state=1)

X_train

# standardize the datasets

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

X_train

# Model Training

from sklearn.linear_model import LinearRegression

regression = LinearRegression()
regression.fit(X_train, y_train)

# print the coefficient
print(regression.coef_)

print(regression.intercept_)

# on which paramters the model has been train
regression.get_params()

# prediction with test data
reg_pred = regression.predict(X_test)

reg_pred

# plot a scatter plot for the prediction
plt.scatter(y_test, reg_pred)

# Residuals
residuals = y_test - reg_pred

residuals

# Ploting residuals
sns.displot(residuals, kind="kde")

# scatter plot withrespect to prediction and residuals
plt.scatter(x=reg_pred, y=residuals)

from sklearn.metrics import mean_squared_error, mean_absolute_error, root_mean_squared_error

print(mean_squared_error(y_test, reg_pred))
print(mean_absolute_error(y_test, reg_pred))
print(root_mean_squared_error(y_test, reg_pred))

# R squared and Adjusted R squared

from sklearn.metrics import r2_score
score = r2_score(y_test, reg_pred)
print(score)

# Calculate Adjusted R squared
n = X_test.shape[0]  # number of rows
p = X_test.shape[1]  # number of independent variables

adjusted_r2 = 1 - (1 - score) * (n - 1) / (n - p - 1)
print(f"Adjusted R-squared: {adjusted_r2}")

# Prediction with new data
new_row = housing_data.iloc[1:3].drop('price', axis=1)
new_row

scaler.transform(new_row)

regression.predict(scaler.transform(new_row))

df.head()

# pickling the model file for diployment
import pickle

pickle.dump(regression, open('regmodel.pkl','wb'))

pickle_model = pickle.load(open('regmodel.pkl','rb'))

pickle_model.predict(scaler.transform(new_row))

